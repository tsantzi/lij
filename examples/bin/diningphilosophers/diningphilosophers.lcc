/*
 * LiJ Copyright 2009 Nikolaos Chatzinikolaou nchatzi@gmail.com
 * 
 * This file is part of LiJ.
 * 
 * LiJ is free software: you can redistribute it and/or modify it under the
 * terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 * 
 * LiJ is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with LiJ. If not, see <http://www.gnu.org/licenses/>.
 */



/**
	An LCC implementation of the Dining Philosophers paradigm.
*/



r(waiter, initial)
r(waiter(L), auxiliary)
r(philosopher, necessary, 5)



a(waiter, I) ::
	a(waiter([0, 1, 2, 3, 4]), I)



a(waiter(L), W) ::
	a(waiter, W) <- L==[]
	or
	(
		null <- L = [P | Lr]
		then
		prompt => a(philosopher, P)
		then
		(
			(
				requestFork(ForkIndex) <= a(philosopher,P)
				then
				(
					fork => a(philosopher, P) <- giveFork(ForkIndex)
					or
					wait => a(philosopher, P)
				)
			)					
			or
			(
				returnForks(ReturnedForkIndexLeft, ReturnedForkIndexRight) <= a(philosopher, P)
				then
				null <- forkReturned(ReturnedForkIndexLeft) and forkReturned(ReturnedForkIndexRight) 
			)
			or
			(
				requestNothing <= a(philosopher, P)
			)
		)
		then
		a(waiter(Lr), W)
	)
	
	

a(philosopher, P) ::
	prompt <= a(waiter, W)
	then
	null <- updateDesire()
	then
	(
		(
			requestFork(ForkIndex) => a(waiter(L), W) <- wantsFork(ForkIndex)
			then
			(
				(
					fork <= a(waiter(L), W)
					then
					null <- gotFork(ForkIndex)
				)
				or
				(
					wait <= a(waiter(L), W)
					then
					null <- gotWait(ForkIndex)
				)
			)
		)
		or
		(
			returnForks(ReturnedForkIndexLeft, ReturnedForkIndexRight) => a(waiter(L), W) <- wantsStartThinking(ReturnedForkIndexLeft, ReturnedForkIndexRight)
		)
		or
		(
			requestNothing => a(waiter(L), W) <- wantsNothing()
		)
	)
	then
	a(philosopher, P)
