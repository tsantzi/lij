/* Generated By:JavaCC: Do not edit this line. Parser.java */
        package lij.parser;

        public class Parser implements ParserConstants {
                private lij.model.Framework  framework = new lij.model.Framework();

                public lij.model.Framework getFramework()
                {
                        return framework;
                }

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Parser specification
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  final public void start() throws ParseException, lij.exceptions.InterpreterException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ROLE:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      role();
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AGENT:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      clause();
    }
    jj_consume_token(0);
  }

  final public void role() throws ParseException, lij.exceptions.InterpreterException {
        lij.model.Term roleName = null;
        Token tRoleType = null;
        Token tRoleMin = null;
        Token tRoleMax = null;
    jj_consume_token(ROLE);
    jj_consume_token(LPAR);
    roleName = term();
    jj_consume_token(COMMA);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INITIAL:
      tRoleType = jj_consume_token(INITIAL);
      break;
    case NECESSARY:
      tRoleType = jj_consume_token(NECESSARY);
      break;
    case OPTIONAL:
      tRoleType = jj_consume_token(OPTIONAL);
      break;
    case AUXILIARY:
      tRoleType = jj_consume_token(AUXILIARY);
      break;
    case CYCLIC:
      tRoleType = jj_consume_token(CYCLIC);
      break;
    case UNCOMMITTED:
      tRoleType = jj_consume_token(UNCOMMITTED);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      tRoleMin = jj_consume_token(INTEGER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        tRoleMax = jj_consume_token(INTEGER);
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    jj_consume_token(RPAR);
                String roleType = tRoleType.image;
                int roleMin = (tRoleMin == null ? -1 : Integer.parseInt(tRoleMin.image));
                int roleMax = (tRoleMax == null ? -1 : Integer.parseInt(tRoleMax.image));
                lij.model.Role newRole = new lij.model.Role(roleName, roleType, roleMin, roleMax);
                framework.addRole(newRole);
  }

  final public void clause() throws ParseException, lij.exceptions.InterpreterException {
        lij.model.DefAgent agent = null;
        lij.parserutil.TreeFactory treeFactory = new lij.parserutil.TreeFactory();
    agent = agent();
    jj_consume_token(CLAUSE);
    clauseBlock(treeFactory);
                lij.model.TreeNode clauseTreeRoot = treeFactory.createTreeRoot();
                lij.model.Clause newClause = new lij.model.Clause(agent, clauseTreeRoot);       // Tree stack is purged in method createTreeRoot()

                framework.addClause(newClause);
  }

  final public void clauseBlock(lij.parserutil.TreeFactory treeFactory) throws ParseException {
    clauseItem(treeFactory);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_3;
      }
      jj_consume_token(OR);
                        treeFactory.pushTreeNodeToken(new lij.model.Operator.Or());
      clauseItem(treeFactory);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case THEN:
      jj_consume_token(THEN);
                        treeFactory.pushTreeNodeToken(new lij.model.Operator.Then());
      clauseBlock(treeFactory);
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
  }

// Null operator, role switch or message
  final public void clauseItem(lij.parserutil.TreeFactory treeFactory) throws ParseException {
        lij.model.Def def = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAR:
      jj_consume_token(LPAR);
                        treeFactory.pushTreeNodeToken(new lij.model.Operator.OpenParen());
      clauseBlock(treeFactory);
      jj_consume_token(RPAR);
                        treeFactory.pushTreeNodeToken(new lij.model.Operator.CloseParen());
      break;
    case AGENT:
    case NULL:
    case CONSTANT:
      def = def();
                treeFactory.pushTreeNodeToken(def);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// Null operator, role switch or message
  final public lij.model.Def def() throws ParseException {
        lij.model.Def def = null;
        java.util.ArrayList<lij.model.Constraint> constraints = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AGENT:
      def = agent();
      break;
    case CONSTANT:
      def = message();
      break;
    case NULL:
      def = nullOp();
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONSTRAINT:
      jj_consume_token(CONSTRAINT);
      constraints = constraints();
                        def.setConstraints(constraints);
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
                {if (true) return def;}
    throw new Error("Missing return statement in function");
  }

  final public lij.model.DefAgent agent() throws ParseException {
        lij.model.Term type = null;
        lij.model.Argument id = null;
    jj_consume_token(AGENT);
    jj_consume_token(LPAR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONSTANT:
      type = term();
      break;
    case WILDCARD:
      jj_consume_token(WILDCARD);
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(COMMA);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LSB:
    case VARIABLE:
    case INTEGER:
    case FLOATING_POINT_LITERAL:
    case STRINGLITERAL:
      id = id();
      break;
    case WILDCARD:
      jj_consume_token(WILDCARD);
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(RPAR);
                {if (true) return new lij.model.DefAgent(type, id);}
    throw new Error("Missing return statement in function");
  }

  final public lij.model.DefMessage message() throws ParseException {
        lij.model.Term content = null;
        lij.model.DefAgent participant = null;
        boolean outgoing = false;
    content = term();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MESSAGEIN:
      jj_consume_token(MESSAGEIN);
                        outgoing = false;
      break;
    case MESSAGEOUT:
      jj_consume_token(MESSAGEOUT);
                        outgoing = true;
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    participant = agent();
                {if (true) return new lij.model.DefMessage(content, participant, outgoing);}
    throw new Error("Missing return statement in function");
  }

  final public lij.model.DefNullOp nullOp() throws ParseException {
    jj_consume_token(NULL);
                {if (true) return new lij.model.DefNullOp();}
    throw new Error("Missing return statement in function");
  }

  final public java.util.ArrayList<lij.model.Constraint> constraints() throws ParseException {
        lij.model.Constraint constraint = null;
        java.util.ArrayList<lij.model.Constraint> constraints = new java.util.ArrayList<lij.model.Constraint>();
    constraint = constraint();
                constraints.add(constraint);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_4;
      }
      jj_consume_token(AND);
      constraint = constraint();
                        constraints.add(constraint);
    }
                {if (true) return constraints;}
    throw new Error("Missing return statement in function");
  }

  final public lij.model.Constraint constraint() throws ParseException {
        lij.model.Constraint constraint = null;
        lij.model.Term constraintMethodTerm = null;
        lij.model.ArgumentVariable argument1;
        lij.model.Argument argument2;
        lij.model.ArgumentVariable head;
        lij.model.ArgumentVariable tail;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONSTANT:
      constraintMethodTerm = term();
                constraint = new lij.model.ConstraintMethod(constraintMethodTerm);

                {if (true) return constraint;}
      break;
    case VARIABLE:
      argument1 = argumentVariable();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
        jj_consume_token(LT);
        argument2 = argument();
                        constraint = new lij.model.ConstraintComparison(lij.model.ConstraintComparison.Type.LESS_THAN, argument1, argument2);
                        {if (true) return constraint;}
        break;
      case GT:
        jj_consume_token(GT);
        argument2 = argument();
                        constraint = new lij.model.ConstraintComparison(lij.model.ConstraintComparison.Type.GREATER_THAN, argument1, argument2);
                        {if (true) return constraint;}
        break;
      case EQ:
        jj_consume_token(EQ);
        argument2 = argument();
                        constraint = new lij.model.ConstraintComparison(lij.model.ConstraintComparison.Type.EQUAL_TO, argument1, argument2);
                        {if (true) return constraint;}
        break;
      case NEQ:
        jj_consume_token(NEQ);
        argument2 = argument();
                        constraint = new lij.model.ConstraintComparison(lij.model.ConstraintComparison.Type.NOT_EQUAL_TO, argument1, argument2);
                        {if (true) return constraint;}
        break;
      case ASSIGN:
        jj_consume_token(ASSIGN);
        if (jj_2_1(2)) {
          // Choosing between X = [..., ..., ...] and X = [H | T]
          
                                  argument2 = argument();
                                constraint = new lij.model.ConstraintAssignment(argument1, argument2);
                                {if (true) return constraint;}
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LSB:
            jj_consume_token(LSB);
            head = argumentVariable();
            jj_consume_token(LISTTAIL);
            tail = argumentVariable();
            jj_consume_token(RSB);
                                constraint = new lij.model.ConstraintList(argument1, head, tail);
                                {if (true) return constraint;}
            break;
          default:
            jj_la1[14] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// a, a(), a(X, Y, Z, ...) , a(x(X1, X2, ...), y(Y1, Y2, ...), z, ...) 
  final public lij.model.Term term() throws ParseException {
        Token tName = null;
        lij.model.Argument argument = null;
        java.util.ArrayList<lij.model.Argument> arguments = new java.util.ArrayList<lij.model.Argument>();
    tName = jj_consume_token(CONSTANT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAR:
      jj_consume_token(LPAR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSB:
      case VARIABLE:
      case INTEGER:
      case FLOATING_POINT_LITERAL:
      case STRINGLITERAL:
        argument = argument();
                                arguments.add(argument);
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[17] = jj_gen;
            break label_5;
          }
          jj_consume_token(COMMA);
          argument = argument();
                                        arguments.add(argument);
        }
        break;
      default:
        jj_la1[18] = jj_gen;
        ;
      }
      jj_consume_token(RPAR);
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
                {if (true) return new lij.model.Term(tName.image, arguments);}
    throw new Error("Missing return statement in function");
  }

  final public lij.model.Argument argument() throws ParseException {
        lij.model.Argument argument = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VARIABLE:
      /* argument = term() | */ argument = argumentVariable();
      break;
    case LSB:
    case INTEGER:
    case FLOATING_POINT_LITERAL:
    case STRINGLITERAL:
      argument = argumentValue();
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return argument;}
    throw new Error("Missing return statement in function");
  }

  final public lij.model.ArgumentVariable argumentVariable() throws ParseException {
        Token tVariable = null;
    tVariable = jj_consume_token(VARIABLE);
                {if (true) return new lij.model.ArgumentVariable(tVariable.image);}
    throw new Error("Missing return statement in function");
  }

  final public lij.model.ArgumentValue argumentValue() throws ParseException {
        Token tValue = null;
        lij.model.ArgumentValue argumentValue = null;
        java.util.ArrayList<java.io.Serializable> list = new java.util.ArrayList<java.io.Serializable>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
      // Static integer
              tValue = jj_consume_token(INTEGER);
                Integer i = new Integer(tValue.image);
                {if (true) return new lij.model.ArgumentValue(i);}
      break;
    case FLOATING_POINT_LITERAL:
      // Static double
              tValue = jj_consume_token(FLOATING_POINT_LITERAL);
                Double d = new Double(tValue.image);
                {if (true) return new lij.model.ArgumentValue(d);}
      break;
    case STRINGLITERAL:
      // Static string
              tValue = jj_consume_token(STRINGLITERAL);
                String s = tValue.image.substring(1, tValue.image.length() - 1);        // Remove the quotes
                {if (true) return new lij.model.ArgumentValue(s);}
      break;
    case LSB:
      jj_consume_token(LSB);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSB:
      case INTEGER:
      case FLOATING_POINT_LITERAL:
      case STRINGLITERAL:
        argumentValue = argumentValue();
                                list.add(argumentValue.getValue());
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[21] = jj_gen;
            break label_6;
          }
          jj_consume_token(COMMA);
          argumentValue = argumentValue();
                                        list.add(argumentValue.getValue());
        }
        break;
      default:
        jj_la1[22] = jj_gen;
        ;
      }
      jj_consume_token(RSB);
                {if (true) return new lij.model.ArgumentValue(list);}
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public lij.model.Argument id() throws ParseException {
        lij.model.Argument argument = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VARIABLE:
      argument = argumentVariable();
      break;
    case LSB:
    case INTEGER:
    case FLOATING_POINT_LITERAL:
    case STRINGLITERAL:
      argument = argumentValue();
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return argument;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_3R_13() {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_10() {
    if (jj_scan_token(VARIABLE)) return true;
    return false;
  }

  private boolean jj_3R_9() {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_scan_token(LSB)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_16()) jj_scanpos = xsp;
    if (jj_scan_token(RSB)) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3R_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_12()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) {
    jj_scanpos = xsp;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_12() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  private boolean jj_3R_8() {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_14() {
    if (jj_scan_token(STRINGLITERAL)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_7()) return true;
    return false;
  }

  private boolean jj_3R_7() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_8()) {
    jj_scanpos = xsp;
    if (jj_3R_9()) return true;
    }
    return false;
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[25];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x200,0x100,0x1f8000,0x40000000,0x40000000,0x800,0x1000,0x4000500,0x500,0x1000000,0x0,0x10000000,0xc00000,0x2000,0x10000000,0x0,0x0,0x40000000,0x10000000,0x4000000,0x10000000,0x40000000,0x10000000,0x10000000,0x10000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000,0x1000,0x0,0x1004,0x850104,0x0,0x0,0x0,0xf8,0x1100,0x0,0x850100,0x0,0x850100,0x0,0x850000,0x850000,0x850100,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[1];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        exists = true;
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[56];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 25; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 56; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

        }
